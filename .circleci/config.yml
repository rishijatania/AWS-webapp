version: 2.1

executors:
  node-mysql-image: # declares a reusable executor
    working_directory: ~/webapp/api # directory where steps will run
    docker:
      - image: circleci/node:11.1.0 # the primary container, where your job's commands are run
        environment:
          NODE_ENV: dev
          PORT: 3000
          DB_DIALECT: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: cloud_comp
          DB_USER: root
          DB_PSWD: password
          FILE_UPLOAD_PATH: /public/assets/
      - image: circleci/mysql:8.0.15
        environment:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: cloud_comp
          MYSQL_USER: admin

commands:
  install-run-npm:
    steps:
      - run:
          name: update-npm
          command: "sudo npm install -g npm@latest"
      - restore_cache: # special step to restore the dependency cache
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install-npm-dependency
          command: npm install
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules

  install_awscli:
    steps:
      - run:
          name: Install awscli
          command: |
            sudo apt update
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            sudo apt-get install less
            sudo apt-get install jq

  build-deployment-artifacts:
    steps:
      - run:
          name: Build Deployment Artifacts
          command: |
            cd /home/circleci
            mkdir codedeploy_artifact
            cd /home/circleci/webapp
            cp codedeploy/*.sh .
            zip -r webapp-${CIRCLE_BUILD_NUM}.zip api appspec.yml *.sh
            mv webapp-${CIRCLE_BUILD_NUM}.zip /home/circleci/codedeploy_artifact

  upload-artifacts-to-storage:
    steps:
      - run:
          name: Upload Build Atrifact to AWS S3
          command: |
            aws s3 sync /home/circleci/codedeploy_artifact s3://${S3_CODEDEPLOY_BUCKET}

  code-deploy:
    steps:
      - run:
          name: Code Deploy API Call
          command: |
            ID=$(aws deploy create-deployment --application-name ${CODEDEPLOY_APPLICATION_NAME} --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name ${CODEDEPLOY_APPLICATION_DEPLOYMENT_GROUP_NAME} --description "CSYE6225 - Codedeploy" --s3-location bucket=${S3_CODEDEPLOY_BUCKET},bundleType=zip,key=webapp-${CIRCLE_BUILD_NUM}.zip --output text)
            STATUS=$(aws deploy get-deployment --deployment-id $ID --output json | jq '.deploymentInfo.status')
            while (($STATUS == "Created" || $STATUS == "InProgress" || $STATUS == "Pending" || $STATUS == "Queued" || $STATUS == "Ready" ))
            do
              echo "Status: $STATUS..."
              STATUS=$(aws deploy get-deployment --deployment-id $ID --output json | jq '.deploymentInfo.status')
              sleep 5
            done

            if [[ $STATUS == "Succeeded" ]]; then
              EXITCODE=0
              echo "Deployment finished."
            else
              EXITCODE=1
              echo "Deployment failed!"
            fi

            exit $EXITCODE

  db-wait:
    steps:
      - run:
          # Our primary container isn't MYSQL so run a sleep command until it's ready.
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1

  run-store-tests:
    steps:
      - run: # run tests
          name: Run Tests
          command: npm test
      # - store_artifacts: # special step to save test results as as artifact
      #     # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
      #     path: test-results.xml
      #     prefix: tests
      # - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
      #     path: test-results.xml

jobs:
  pr_check:
    executor: node-mysql-image
    steps:
      - checkout:
          path: ~/webapp
      - install-run-npm
      - db-wait
      - run-store-tests

  build:
    executor: node-mysql-image
    steps:
      - checkout: # check out the code in the project directory
          path: ~/webapp
      - install_awscli
      - build-deployment-artifacts
      - upload-artifacts-to-storage
      - code-deploy

workflows:
  pr-check:
    jobs:
      - pr_check:
          filters:
            branches:
              only: /^pull\/.*$/
  build_deploy:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
